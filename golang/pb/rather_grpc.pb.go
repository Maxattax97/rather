// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rather.proto

package rather

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rather_GetRose_FullMethodName = "/rather.Rather/GetRose"
)

// RatherClient is the client API for Rather service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatherClient interface {
	// Sends a greeting
	GetRose(ctx context.Context, in *RoseRequest, opts ...grpc.CallOption) (*RoseResponse, error)
}

type ratherClient struct {
	cc grpc.ClientConnInterface
}

func NewRatherClient(cc grpc.ClientConnInterface) RatherClient {
	return &ratherClient{cc}
}

func (c *ratherClient) GetRose(ctx context.Context, in *RoseRequest, opts ...grpc.CallOption) (*RoseResponse, error) {
	out := new(RoseResponse)
	err := c.cc.Invoke(ctx, Rather_GetRose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatherServer is the server API for Rather service.
// All implementations must embed UnimplementedRatherServer
// for forward compatibility
type RatherServer interface {
	// Sends a greeting
	GetRose(context.Context, *RoseRequest) (*RoseResponse, error)
	mustEmbedUnimplementedRatherServer()
}

// UnimplementedRatherServer must be embedded to have forward compatible implementations.
type UnimplementedRatherServer struct {
}

func (UnimplementedRatherServer) GetRose(context.Context, *RoseRequest) (*RoseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRose not implemented")
}
func (UnimplementedRatherServer) mustEmbedUnimplementedRatherServer() {}

// UnsafeRatherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatherServer will
// result in compilation errors.
type UnsafeRatherServer interface {
	mustEmbedUnimplementedRatherServer()
}

func RegisterRatherServer(s grpc.ServiceRegistrar, srv RatherServer) {
	s.RegisterService(&Rather_ServiceDesc, srv)
}

func _Rather_GetRose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatherServer).GetRose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rather_GetRose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatherServer).GetRose(ctx, req.(*RoseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rather_ServiceDesc is the grpc.ServiceDesc for Rather service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rather_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rather.Rather",
	HandlerType: (*RatherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRose",
			Handler:    _Rather_GetRose_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rather.proto",
}
